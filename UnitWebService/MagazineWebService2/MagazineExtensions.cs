// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UnitWebService
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Magazine.
    /// </summary>
    public static partial class MagazineExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MagazineEntry> GetAllProducts(this IMagazine operations)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).GetAllProductsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MagazineEntry>> GetAllProductsAsync(this IMagazine operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProductsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetProduct(this IMagazine operations, int id)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).GetProductAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductAsync(this IMagazine operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='localization'>
            /// </param>
            public static object AddMagazineProduct(this IMagazine operations, string name, int count, string localization)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).AddMagazineProductAsync(name, count, localization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='localization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddMagazineProductAsync(this IMagazine operations, string name, int count, string localization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddMagazineProductWithHttpMessagesAsync(name, count, localization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ModifyMagazineProduct(this IMagazine operations, int id, int count)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).ModifyMagazineProductAsync(id, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ModifyMagazineProductAsync(this IMagazine operations, int id, int count, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyMagazineProductWithHttpMessagesAsync(id, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RemoveMagazineProduct(this IMagazine operations, int id)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).RemoveMagazineProductAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveMagazineProductAsync(this IMagazine operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveMagazineProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object RemoveAllMagazineProducts(this IMagazine operations)
            {
                return Task.Factory.StartNew(s => ((IMagazine)s).RemoveAllMagazineProductsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveAllMagazineProductsAsync(this IMagazine operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveAllMagazineProductsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
